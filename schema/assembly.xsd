<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xsd:schema xmlns="http://www.typhoonframework.org/schema/assembly"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.typhoonframework.org/schema/assembly">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>

    <xsd:annotation>
        <xsd:documentation><![CDATA[
	Typhoon Components Schema
	Authors: Jasper Blues (based on the Spring Java version by Juergen Hoeller et al).
		]]></xsd:documentation>
    </xsd:annotation>

    <!-- base types -->
    <xsd:complexType name="identifiedType" abstract="true">
        <xsd:attribute name="key" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The unique identifier for component bean. A component key may not be used more than once
	within the same <assembly> element.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <!-- Top-level <assembly> tag -->
    <xsd:element name="assembly">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Container for <component> and other elements, typically the root element in the document.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="description" minOccurs="0"/>
                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element ref="component"/>
                    <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:choice>
            </xsd:sequence>
            <xsd:anyAttribute namespace="##other" processContents="lax"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="description">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Contains informative text describing the purpose of the enclosing element.
	Used primarily for user documentation of XML component definition documents.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded"/>
        </xsd:complexType>
    </xsd:element>


    <xsd:group name="componentElements">
        <xsd:sequence>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="initializer"/>
                <xsd:element ref="property"/>
                <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

    <xsd:attributeGroup name="componentAttributes">
        <xsd:attribute name="class" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation source="java:java.lang.Class"><![CDATA[
	The name of the component's class.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>

        <xsd:attribute name="scope">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The scope of this bean: typically "singleton" (one shared instance,
	which will be returned by all calls to objectForKey with the given id), or
	"prototype" (independent instance resulting from each call).

	By default, a bean will be a singleton, unless the bean has a parent
	bean definition in which case it will inherit the parent's scope.

	Inner component definitions inherit the singleton status of their containing
	component definition, unless explicitly specified: The inner component will be a
	singleton if the containing bean is a singleton, and a prototype if
	the containing bean has any other scope.
				]]></xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="singleton"/>
                    <xsd:enumeration value="prototype"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>

        <xsd:attribute name="parent" type="xsd:string">
        </xsd:attribute>

        <xsd:attribute name="before-property-injection" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The name of the custom initialization method to invoke before setting
	component properties. The method must have no arguments, but may throw any
	exception.

	This is an alternative to implementing TyphoonPropertyInjectionDelegate
	protocol.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="after-property-injection" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The name of the custom initialization method to invoke after setting
	component properties. The method must have no arguments, but may throw any
	exception.

	This is an alternative to implementing TyphoonPropertyInjectionDelegate
	protocol.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="factory-component" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	Alternative to class attribute for factory-method usage.
	If this is specified, no class attribute should be used.
	This must be set to the name of a bean in the current or
	ancestor factories that contains the relevant factory method.
	This allows the factory itself to be configured using Dependency
	Injection, and an instance, rather than class method to be used.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:attributeGroup>

    <xsd:element name="component">
        <xsd:annotation>
            <xsd:documentation source="java:org.springframework.beans.factory.config.BeanDefinition"><![CDATA[
	Defines a single (usually named) component.

	A component definition may contain nested tags for initializer methods and ,
	property values. Mixing initializer injection and setter injection on the
	same component is explicitly supported.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="identifiedType">
                    <xsd:group ref="componentElements"/>
                    <xsd:attributeGroup ref="componentAttributes"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="initializer">
        <xsd:annotation>
            <xsd:documentation source="java:org.springframework.beans.factory.config.ConstructorArgumentValues">
                <![CDATA[
	Component definitions can specify zero or more initializer arguments.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="description" minOccurs="0"/>
                <xsd:choice minOccurs="0" maxOccurs="unbounded">
                    <xsd:element ref="argument"/>
                    <xsd:any namespace="##other" processContents="strict"/>
                </xsd:choice>
            </xsd:sequence>

            <xsd:attribute name="selector" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
	The name of the selector/method to invoke in standard objective-c format.
	Eg initWithNibName:bundle
					]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="is-class-method" default="guess">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
	Indicates whether the initializer is a class method or an 'alloc init' method. The default
	behavior is 'guess' - a class starting with 'init' will be treated as a instance method,
	otherwise it will be resolved as a class method.
					]]></xsd:documentation>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base="xsd:NMTOKEN">
                        <xsd:enumeration value="guess"/>
                        <xsd:enumeration value="yes"/>
                        <xsd:enumeration value="no"/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="property" type="propertyType">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Component definitions can have zero or more properties.
	Property elements correspond to Objective-C setter methods exposed
	by the bean classes. Typhoon supports primitives, references to other
	components in the same or related factories, as well as objects that will be
	converted to the required type using a type converter registry.
			]]></xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="propertyType">
        <xsd:sequence>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:choice minOccurs="0" maxOccurs="1">
                <xsd:element ref="collection" minOccurs="0" maxOccurs="1"/>
                <!-- Inline components not supported yet -->
                <!--<xsd:element ref="component"/>-->
                <xsd:any namespace="##other" processContents="strict"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The name of the property, following Objective-C naming conventions.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	A reference to a component definition.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="value" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The value to be injected. Will be converted to the required type.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:element name="argument" type="argumentType">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Initializers can have zero or more arguments. Supports primitives, references to other
	components, as well as objects that will be converted to the required type using a type
	converter registry.
			]]></xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="argumentType">
        <xsd:sequence>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:choice minOccurs="0" maxOccurs="1">
                <!-- inline components not supported yet -->
                <!--<xsd:element ref="component"/>-->
                <xsd:any namespace="##other" processContents="strict"/>
            </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="parameterName" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The name of the argument, following Objective-C naming conventions.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="index" type="xsd:integer" use="optional">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The index of the argument.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ref" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	A reference to a component definition.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="value" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The value to be injected. Will be converted to the required type.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="required-class" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation><![CDATA[
	The class to be injected. Required for non-primitive argument types.
				]]></xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    
    <!-- infrastructure -->
    
    <xsd:element name="property-placeholder">
        <xsd:attribute name="location" type="xsd:string" />
    </xsd:element>
    
    <!-- simple internal types -->
    <xsd:simpleType name="defaultable-boolean">
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="default"/>
            <xsd:enumeration value="true"/>
            <xsd:enumeration value="false"/>
        </xsd:restriction>
    </xsd:simpleType>


    <xsd:element name="collection">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Represents a collection of values.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:element ref="ref"/>
                <xsd:element ref="value"/>
            </xsd:choice>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="ref">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Adds a collection value by referencing another component definition in the container.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="value">
        <xsd:annotation>
            <xsd:documentation><![CDATA[
	Adds a collection value by performing type conversion on the text value.
			]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType mixed="true">
            <xsd:choice minOccurs="0" maxOccurs="unbounded"/>
            <xsd:attribute name="requiredType" type="xsd:string" use="required"/>
        </xsd:complexType>
    </xsd:element>

</xsd:schema>
